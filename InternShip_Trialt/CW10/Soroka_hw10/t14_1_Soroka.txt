ods noproctitle;

/* start macro variables **************************************************************************************************************/
%let id = u64271711;
%let sdn = Soroka;
/* end macro variables **************************************************************************************************************/

/* start macro programs *******************************************************************************************************/
%macro totobs(mydata);
	%let mydataID=%sysfunc(OPEN(&mydata.,IN));
	%let NOBS=%sysfunc(ATTRN(&mydataID,NOBS));
	%let RC=%sysfunc(CLOSE(&mydataID));
	&NOBS
%mend;
%macro Grouping_Variable_SC(tab, var);
data &tab._S;
	set &tab.;
	where survived = 1;
run;
data &tab._D;
	set &tab.;
	where survived = 0;
run;
proc freq data=&tab._S noprint;
	table &var.*class / out=S_&var._freq(drop=percent);
run;
proc freq data=&tab._D noprint;
	table &var.*class / out=D_&var._freq(drop=percent);
run;
data S_&var._freq_ch(drop= class count);
	length &var. $ 200 class_ch $ 200 count_ch $ 200;
	set S_&var._freq;
	class_ch = cats(put(class, 1.));
	count_ch = cats(put(count, 4.));
run;
data D_&var._freq_ch(drop= class count);
	length &var. $ 200 class_ch $ 200 count_ch $ 200;
	set D_&var._freq;
	class_ch = cats(put(class, 1.));
	count_ch = cats(put(count, 4.));
run;
proc sort data=S_&var._freq_ch out=S_&var._sort;
	by &var. class_ch count_ch;
run;
proc sort data=D_&var._freq_ch out=D_&var._sort;
	by &var. class_ch count_ch;
run;
proc transpose data=S_&var._sort out=S_&var._trans(drop=_name_) prefix=class_;
	id class_ch;
	by &var.;
	var count_ch;
run;
proc transpose data=D_&var._sort out=D_&var._trans(drop=_name_) prefix=class_;
	id class_ch;
	by &var.;
	var count_ch;
run;
data S_&var._pre;
	set S_&var._trans;
	length var5 $ 200;
	class_1 = cats(put(max(0, input(class_1, 4.)),4.));
	class_2 = cats(put(max(0, input(class_2, 4.)),4.));
	class_3 = cats(put(max(0, input(class_3, 4.)),4.));
	var5 = cats(put(
	input(class_1, 4.) + 
	input(class_2, 4.) +
	input(class_3, 4.) ,
	4.));
	rename &var. = var1
	class_1 = var2
	class_2 = var3
	class_3 = var4;
run;
data D_&var._pre;
	set D_&var._trans;
	length var9 $ 200;
	class_1 = cats(put(max(0, input(class_1, 4.)),4.));
	class_2 = cats(put(max(0, input(class_2, 4.)),4.));
	class_3 = cats(put(max(0, input(class_3, 4.)),4.));
	var9 = cats(put(
	input(class_1, 4.) + 
	input(class_2, 4.) +
	input(class_3, 4.) ,
	4.));
	rename &var. = var1
	class_1 = var6
	class_2 = var7
	class_3 = var8;
run;
proc sort data=S_&var._pre out=S_&var._preS;
	by var1;
run;
proc sort data=D_&var._pre out=D_&var._preS;
	by var1;
run;
data &var._noP(drop=var2_cnt var3_cnt var4_cnt var5_cnt var6_cnt var7_cnt var8_cnt var9_cnt);
	merge S_&var._preS
	D_&var._preS;
	by var1;
	retain var2_cnt 0 var3_cnt 0 var4_cnt 0 
	var5_cnt 0 var6_cnt 0 var7_cnt 0 var8_cnt 0 var9_cnt 0;
	var2_cnt + input(var2, 4.);
	var3_cnt + input(var3, 4.);
	var4_cnt + input(var4, 4.);
	var5_cnt + input(var5, 4.);
	var6_cnt + input(var6, 4.);
	var7_cnt + input(var7, 4.);
	var8_cnt + input(var8, 4.);
	var9_cnt + input(var9, 4.);
	call symputx('var2_cnt', var2_cnt);
	call symputx('var3_cnt', var3_cnt);
	call symputx('var4_cnt', var4_cnt);
	call symputx('var5_cnt', var5_cnt);
	call symputx('var6_cnt', var6_cnt);
	call symputx('var7_cnt', var7_cnt);
	call symputx('var8_cnt', var8_cnt);
	call symputx('var9_cnt', var9_cnt);
run;
data &var._out;
	set &var._noP;
	var2 = cats(var2) || ' (' || cats(put(round(input(var2, 5.) / &var2_cnt.  * 100, 0.1), 5.1)) || '%)';
	var3 = cats(var3) || ' (' || cats(put(round(input(var3, 5.) / &var3_cnt.  * 100, 0.1), 5.1)) || '%)';
	var4 = cats(var4) || ' (' || cats(put(round(input(var4, 5.) / &var4_cnt.  * 100, 0.1), 5.1)) || '%)';
	var5 = cats(var5) || ' (' || cats(put(round(input(var5, 5.) / &var5_cnt.  * 100, 0.1), 5.1)) || '%)';
	var6 = cats(var6) || ' (' || cats(put(round(input(var6, 5.) / &var6_cnt.  * 100, 0.1), 5.1)) || '%)';
	var7 = cats(var7) || ' (' || cats(put(round(input(var7, 5.) / &var7_cnt.  * 100, 0.1), 5.1)) || '%)';
	var8 = cats(var8) || ' (' || cats(put(round(input(var8, 5.) / &var8_cnt.  * 100, 0.1), 5.1)) || '%)';
	var9 = cats(var9) || ' (' || cats(put(round(input(var9, 5.) / &var9_cnt.  * 100, 0.1), 5.1)) || '%)';
run;
proc sort data=&var._out out= &var._out_s;
	by var1;
run;
%mend;
/* end macro programs *******************************************************************************************************/

/* start creating template *******************************************************************************************************/
proc template;
	define style intern;
		parent=styles.rtf;
	style Table from output /
		background=_undef_
		Rules=groups
		Frame=hsides
		textalign=center
		font=("Courier New", 9pt)
		cellpadding = 0pt
		cellspacing = 0pt
		borderwidth = 0.25pt 
		width = 100%
		asis = on;
	style fonts from fonts /
		'docFont' = ("Courier New", 9pt); 
	style rowheader /
		background=white
		font=("Courier New", 9pt)
		asis=on;
	style header /
		font=("Courier New", 9pt)
		textalign=center
		verticalalign=center
		asis=on
		background=white;
	style systemtitle /
		font=("Courier New", 9pt);
	style systemfooter /
		font=("Courier New", 9pt)
		asis=on;
	style data from data /
		font=("Courier New", 9pt)
		verticalalign = m
		asis=on
		marginbottom = 0.8pt
		margintop = 1.25pt;
	replace Body from Document /
		 marginleft=1in
	     marginright=0.6in;
	end;
run;
/* end creating template *******************************************************************************************************/

/* start Create libref *******************************************************************************************************/
libname Soroka "/home/&id./InternShip/&sdn._cw10";
/* end Create libref *******************************************************************************************************/

/* start Import *******************************************************************************************************/
options validvarname=v7;
proc import datafile="/home/&id./InternShip/&sdn._cw10/test.csv"
	 		dbms=csv out=test replace;
	guessingrows=max;
run;
proc import datafile="/home/&id./InternShip/&sdn._cw10/titanic.csv"
	 		dbms=csv out=titanic replace;
	guessingrows=max;
run;
proc import datafile="/home/&id./InternShip/&sdn._cw10/titanic3.csv"
	 		dbms=csv out=titanic3 replace;
	guessingrows=max;
run;
proc import datafile="/home/&id./InternShip/&sdn._cw10/train.csv"
	 		dbms=csv out=train replace;
	guessingrows=max;
run;
/* end Import *******************************************************************************************************/

/* start creating merge var *******************************************************************************************************/
data train_test;
	set train test;
	if name ^= '' then name_nq = compress(name, '"');
	if age ^= . then age_r = round(age);
run;
data titanic;
	set titanic;
	if name ^= '' then name_nq = compress(name, '"');
	if age ^= . then age_r = round(age);
run;
data titanic3;
	set titanic3;
	where name is not missing;
	if name ^= '' then name_nq = compress(name, '"');
	if age ^= . then age_r = round(age);
run;
/* end creating merge var *******************************************************************************************************/

/* start data sorting *******************************************************************************************************/
proc sort data=titanic out=titanic_srt;by name_nq age_r ;run;
proc sort data=titanic3 out=titanic3_srt;by name_nq age_r ;run;
proc sort data=train_test out=train_test_srt;by name_nq age_r ;run;
/* end data sorting *******************************************************************************************************/

/* start merging *******************************************************************************************************/
data Titanic_full(drop=name_nq age_r);
	merge titanic_srt(in=in_main)
	train_test_srt(keep=name_nq age_r )
	titanic3_srt(keep=name_nq age_r embarked sibsp parch cabin);
	by name_nq age_r;
	if in_main;
run;
/* end merging *******************************************************************************************************/

/* start adding var *******************************************************************************************************/
data Titanic_full_v1(keep=Family_size Cabin_Known Embarkation_Port Title_Group survived class);
	length Family_size $ 200 Cabin_Known $ 200
	Embarkation_Port $ 200 Title_Group $ 200;
	set Titanic_full;
	if (max(0, sibsp) + max(0, parch) + 1) = 1 then Family_size = "  1 (solo)";
	else if 2 <= (max(0, sibsp) + max(0, parch) + 1) <= 4 then Family_size = "  2-4";
	else if (max(0, sibsp) + max(0, parch) + 1) >= 5 then Family_size = "  5+";
	if cabin = '' then Cabin_Known = '  Yes';
	else Cabin_Known = '  No';
	if embarked = 'C' then Embarkation_Port = '  Cherbourg';
	else if embarked = 'S' then Embarkation_Port = '  Southampton';
	else if embarked = 'Q' then Embarkation_Port = '  Queenstown';
	if scan(name, 2, ',. ') in ('Mr', 'Mrs', 'Miss') then Title_Group = "  Mr/Mrs/Miss";
	else if scan(name, 2, ',. ') = 'Master' then Title_Group = "  Master";
	else Title_Group = '  Other';
run;
/* end adding var *******************************************************************************************************/

/* start tables create  *******************************************************************************************************/
%Grouping_Variable_SC(Titanic_full_v1, Family_size);
%Grouping_Variable_SC(Titanic_full_v1, Cabin_Known);
%Grouping_Variable_SC(Titanic_full_v1, Embarkation_Port);
%Grouping_Variable_SC(Titanic_full_v1, Title_Group);
/* end tables create  *******************************************************************************************************/

/* start tables merging  *******************************************************************************************************/
data Titanic_nstr;
	merge Family_size_out_S
	Cabin_Known_out_S
	Embarkation_Port_out_S
	Title_Group_out_S;
	by var1;
	if var1 ^= '' then output;;
	if _n_ = 1 then do;
		var2 = '';
		var3 = '';
		var4 = '';
		var5 = '';
		var6 = '';
		var7 = '';
		var8 = '';
		var9 = '';
		var1='Family size';
		output;
		var1='Cabin Known';
		output;
		var1='Embarkation^nPort';
		output;
		var1='Title Group';
		output;
	end;
run;
data &sdn..t14_1_&sdn.(drop=help);
	do i = 1, 5, 6, 7, 2, 15, 11, 3, 8, 13, 14, 4, 10, 9, 12;
    	set Titanic_nstr point=i;
    	/* start work place */
    	help = scan(var2, 1, ' ()%');
    	do i = length(help) to 2 by 1;
    		var2 = ' ' || var2;
    	end;
    	help = scan(var3, 1, ' ()%');
    	do i = length(help) to 2 by 1;
    		var3 = ' ' || var3;
    	end;
    	help = scan(var4, 1, ' ()%');
    	do i = length(help) to 2 by 1;
    		var4 = ' ' || var4;
    	end;
    	help = scan(var5, 1, ' ()%');
    	do i = length(help) to 2 by 1;
    		var5 = ' ' || var5;
    	end;
    	help = scan(var6, 1, ' ()%');
    	do i = length(help) to 2 by 1;
    		var6 = ' ' || var6;
    	end;
    	help = scan(var7, 1, ' ()%');
    	do i = length(help) to 2 by 1;
    		var7 = ' ' || var7;
    	end;
    	help = scan(var8, 1, ' ()%');
    	do i = length(help) to 2 by 1;
    		var8 = ' ' || var8;
    	end;
    	help = scan(var9, 1, ' ()%');
    	do i = length(help) to 2 by 1;
    		var9 = ' ' || var9;
    	end;
    	if length(var2) = 10 then var2 = substr(var2, 1, 3) || ' ' || substr(var2, 4, 7);
    	if length(var3) = 10 then var3 = substr(var3, 1, 3) || ' ' || substr(var3, 4, 7);
    	if length(var4) = 10 then var4 = substr(var4, 1, 3) || ' ' || substr(var4, 4, 7);
    	if length(var5) = 10 then var5 = substr(var5, 1, 3) || ' ' || substr(var5, 4, 7);
    	if length(var6) = 10 then var6 = substr(var6, 1, 3) || ' ' || substr(var6, 4, 7);
    	if length(var7) = 10 then var7 = substr(var7, 1, 3) || ' ' || substr(var7, 4, 7);
    	if length(var8) = 10 then var8 = substr(var8, 1, 3) || ' ' || substr(var8, 4, 7);
    	if length(var9) = 10 then var9 = substr(var9, 1, 3) || ' ' || substr(var9, 4, 7);
    	/* end work place */
    	output;
    end;
    stop;
run;
/* end tables merging  *******************************************************************************************************/

/* start counting *******************************************************************************************************/
data tab_S1;
	set titanic_full;
	where survived = 1 and class = 1;
run;
data tab_S2;
	set titanic_full;
	where survived = 1 and class = 2;
run;
data tab_S3;
	set titanic_full;
	where survived = 1 and class = 3;
run;
data tab_D1;
	set titanic_full;
	where survived = 0 and class = 1;
run;
data tab_D2;
	set titanic_full;
	where survived = 0 and class = 2;
run;
data tab_D3;
	set titanic_full;
	where survived = 0 and class = 3;
run;
/* end counting *******************************************************************************************************/

/* start creating report *******************************************************************************************************/
ods escapechar='^';
ods rtf file="/home/&id./InternShip/&sdn._cw10/t14_1_&sdn..rtf"
	style=intern startpage=never;
	options nodate nonumber 
	orientation=landscape papersize=(11in 8.5in)
	topmargin=1.25in bottommargin=0.8in 
	leftmargin=1in rightmargin=0.6in;
%let date = %sysfunc(date(),  DATE9.);
%let time = %sysfunc(time(), time5.);
title justify=right 'Page ^{thispage} of ^{lastpage}';
title2 justify=right "&date &time";
title3 justify=center 'Table 14.1';
title4 'Summary of Survival Status by Passenger Characteristics and Class';
footnote justify=left "Percentages are based on the number of passengers within each class (N).";
footnote2 justify=left "/home/&id./InternShip/&sdn._cw10/t14_1_&sdn..sas ran on &date. at &time. Programmer: &sdn.";
/* start proc report *******************************************************************************************************/
proc report data=&sdn..t14_1_&sdn. nowd spanrows  
	style(header)=[just=center height=0.32in vjust=bottom] style(column)=[height=0.289in];
	column var1 ("^{style [borderbottomwidth=1pt] Survive}" var2 var3 var4 var5)
	("^{style [borderbottomwidth=1pt] Deceased}" var6 var7 var8 var9);
	define var1 / display "Grouping^n  Variable" style(header)=[just=left];
	define var2 / display "Class 1^n(N=%totobs(tab_S1))";
	define var3 / display "Class 2^n(N=%totobs(tab_S2))";
	define var4 / display "Class 3^n(N=%totobs(tab_S3))";
	define var5 / display "Total^n(N=%sysevalf(%totobs(tab_S1)+%totobs(tab_S2)+%totobs(tab_S3)))";
	define var6 / display "Class 1^n(N=%totobs(tab_D1))";
	define var7 / display "Class 2^n(N=%totobs(tab_D2))";
	define var8 / display "Class 3^n(N=%totobs(tab_D3))";
	define var9 / display "Total^n(N=%sysevalf(%totobs(tab_D1)+%totobs(tab_D2)+%totobs(tab_D3)))";
run;
/* end proc report *******************************************************************************************************/
ods rtf close;
/* start creating report *******************************************************************************************************/

ods proctitle;